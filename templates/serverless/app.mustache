'use strict';

var path = require('path');
var express = require('express')
var bodyParser = require('body-parser')
var awsServerlessExpressMiddleware = require('aws-serverless-express/middleware')
var Brakes = require('brakes');
var globalStats = Brakes.getGlobalStats();

// The Swagger document (require it, build it programmatically, fetch it from a URL, ...)
let specYAML = path.join(__dirname, 'specs/{{apiName}}/swagger.yaml');
const swagger = require('swagger-express-middleware');
const Middleware = swagger.Middleware;
const middlewareParseParams = function(req, res, next) {    
  req.swagger.params.map(p => {
    if (p.in == 'path') req.swagger.params[p.name] = { name: p.name, value: req.params[p.name] }
    if (p.in == 'body') req.swagger.params[p.name] = { name: p.name, value: req.body }
    if (p.in == 'query') req.swagger.params[p.name] = { name: p.name, value: req.query[p.name] }
  })   
  return next()
}

let app = express()
let middleware = new Middleware(app);

middleware.init(specYAML, (err) => {
  app.use(bodyParser.json())
  app.use(awsServerlessExpressMiddleware.eventContext())
  app.use(middleware.metadata());
  app.use(middleware.parseRequest());

  // These two middleware don't have any options (yet)
  app.use(middleware.CORS());
  app.use(middleware.validateRequest());
  // Route validated requests to appropriate controller
  {{#services}}
  {{#servicePoints}}
  {{#operations}}
  app.{{httpMethodCase}}("{{replacedPathName}}", middlewareParseParams, require("./{{apiName}}/{{serviceName}}/controllers/{{operationId}}"));
  {{/operations}}  
  {{/servicePoints}}
  {{/services}}

   // The mock middleware will use our custom data store,
  // which we already pre-populated with mock data
  //app.use(middleware.mock(myDB));

  // Global application error handler
  app.use(function (err, req, res, next, statusCode) {
    if (res.headersSent) {
      return next(err);
    } else {
      res.status(statusCode || 500).json({
        code: "ErrorServiceProviderSystemException",
        message: err.message,
        error: err
      });
    }
  });
  
  app.use('/hystrix.stream', function (req, res, next) {
    res.setHeader('Content-Type', 'text/event-stream;charset=UTF-8');
    res.setHeader('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    globalStats.getHystrixStream().pipe(res);
  })

  app.listen(3000, function () {
    console.log("Server is started")
  })

})