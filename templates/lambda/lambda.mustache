AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda resource stack creation using Minify CLI
Parameters:
  ApiGatewayName:
    Type: String
    Default: 'apid8abe62b'
  DeploymentStage:
    Type: String
    Default: 'demo'
Resources:
  {{#services}}
  {{name}}LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      aws:asset:path: "./src"
      aws:asset:property: Code
    Properties:
      Handler: index.handler      
      Environment:
        Variables:
          ENVIRONMENT:
            !Ref DeploymentStage          
      Role:
        Fn::GetAtt:
        - {{name}}LambdaExecutionRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '25'
      Code:
        ZipFile: |
          var aws = require('aws-sdk')
          var response = require('cfn-response')
          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  response.send(event, context, "SUCCESS")
                  return
              }
              var responseStatus = "FAILED"
              var responseData = {}
              var functionName = event.ResourceProperties.FunctionName
              var lambda = new aws.Lambda()
              lambda.invoke({ FunctionName: functionName }, function(err, invokeResult) {
                  if (err) {
                      responseData = {Error: "Invoke call failed"}
                      console.log(responseData.Error + ":\n", err)
                  }
                  else responseStatus = "SUCCESS"
                  response.send(event, context, responseStatus, responseData)
              })
          }
      #  S3Bucket: SystemMonitoring-SystemMonitoring-deployment
      #  S3Key: SystemMonitoring-SystemMonitoring-systemMonitoring-build.zip
  {{name}}LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  {{name}}lambdaexecutionpolicy:
    DependsOn:
    - {{name}}LambdaExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lambda-execution-policy
      Roles:
      - !Ref {{name}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub:
            - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              lambda:
                !Ref {{name}}LambdaFunction
  {{name}}SecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret manager for {{name}}LambdaFunction
      GenerateSecretString:
        SecretStringTemplate: '{"type":"auto"}'
        GenerateStringKey: password
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        PasswordLength: 16
  {{name}}ResourcesPolicy:
    DependsOn:
    - {{name}}LambdaExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lambda-resource-access-policy
      Roles:
      - !Ref {{name}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
          - Fn::Sub:
            - arn:aws:secretsmanager:${region}:${account}:secret:${secretname}-${env}-*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              secretname:
                !Ref {{name}}SecretManager
              env:
                !Ref DeploymentStage  
  {{name}}LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref {{name}}LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ApiGatewayName
          - "/*/*/*"  
  {{/services}}
Outputs:
  StackName:
    Description: Stack friendly name
    Value: {{ServiceName}}