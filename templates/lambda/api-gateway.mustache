AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway resource stack creation using Minify CLI
Parameters:
  DeploymentStage:
    Type: String
    Default: 'demo'
Resources:
  {{apiName}}:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: '{{apiName}} Definitions'
      Name: {{apiName}}
      Body:
        swagger: '2.0'
        info:
          version: '2017-04-20T04:08:08Z'
          title: {{apiName}}        
        host:
          Fn::Join:
          - ''
          - - apigateway.
            - Ref: AWS::Region
            - ".amazonaws.com"
        basePath:
          Fn::Join:
          - ''
          - - "/"
            - Ref: DeploymentStage
        schemes:
        - https
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
          Validate query string parameters and headers:
            validateRequestParameters: true
            validateRequestBody: false        
        x-amazon-apigateway-request-validator: Validate query string parameters and headers        
        paths:
          {{#services}}
          {{#service}}
          {{#operations}}          
          "{{path}}":
            {{#hasOptions}}
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              security:
              - sigv4: []                  
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock            
            {{/hasOptions}}
            {{^hasOptions}}
            {{/hasOptions}}
            {{#operation}}            
            {{httpMethodCase}}:
              consumes:
              - application/json
              produces:
              - application/json
              {{#httpMethodHasBody}}
              parameters:
              - in: body
                name: RequestSchema
                required: false
                schema:
                  "$ref": "#/definitions/RequestSchema"
              {{/httpMethodHasBody}}
              {{^httpMethodHasBody}}
              parameters:
              - in: query
                name: search
                required: false
              {{/httpMethodHasBody}}
              responses:
                '200':
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/ResponseSchema"                                    
              x-amazon-apigateway-request-validator: Validate body
              x-amazon-apigateway-integration:                
                responses:
                  default:
                    statusCode: '200'                
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref AWS::Region
                    - ":lambda:path/2015-03-31/functions/"
                    - !GetAtt {{serviceName}}LambdaFunction.Arn
                    - "/invocations"                
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy            
            {{/operation}}          
          {{/operations}}
          {{/service}}
          {{/services}}
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4            
        definitions:
          RequestSchema:
            type: object
            required:
            - request
            properties:
              request:
                type: string
            title: Request Schema
          ResponseSchema:
            type: object
            required:
            - response
            properties:
              response:
                type: string
            title: Response Schema        
      FailOnWarnings: true
  {{apiName}}APIGateWayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: The Development stage deployment of your API.
      StageName:
        !Ref DeploymentStage
      RestApiId:
        !Ref {{apiName}}
{{#services}}
  {{serviceName}}LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      aws:asset:path: "./src"
      aws:asset:property: Code
    Properties:
      Handler: index.handler      
      Environment:
        Variables:
          ENVIRONMENT:
            !Ref DeploymentStage          
      Role:
        Fn::GetAtt:
        - {{serviceName}}LambdaExecutionRole
        - Arn
      Runtime: nodejs10.x
      Timeout: '25'
      Code:
        ZipFile: |
          var aws = require('aws-sdk')
          var response = require('cfn-response')
          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  response.send(event, context, "SUCCESS")
                  return
              }
              var responseStatus = "FAILED"
              var responseData = {}
              var functionName = event.ResourceProperties.FunctionName
              var lambda = new aws.Lambda()
              lambda.invoke({ FunctionName: functionName }, function(err, invokeResult) {
                  if (err) {
                      responseData = {Error: "Invoke call failed"}
                      console.log(responseData.Error + ":\n", err)
                  }
                  else responseStatus = "SUCCESS"
                  response.send(event, context, responseStatus, responseData)
              })
          }
      #  S3Bucket: SystemMonitoring-SystemMonitoring-deployment
      #  S3Key: SystemMonitoring-SystemMonitoring-systemMonitoring-build.zip
  {{serviceName}}LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  {{serviceName}}lambdaexecutionpolicy:
    DependsOn:
    - {{serviceName}}LambdaExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lambda-execution-policy
      Roles:
      - !Ref {{serviceName}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub:
            - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              lambda:
                !Ref {{serviceName}}LambdaFunction
  {{apiName}}SecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret manager for {{serviceName}}LambdaFunction
      GenerateSecretString:
        SecretStringTemplate: '{"type":"auto"}'
        GenerateStringKey: password
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        PasswordLength: 16
  {{serviceName}}ResourcesPolicy:
    DependsOn:
    - {{serviceName}}LambdaExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lambda-resource-access-policy
      Roles:
      - !Ref {{serviceName}}LambdaExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
          - Fn::Sub:
            - arn:aws:secretsmanager:${region}:${account}:secret:${secretname}-${env}-*
            - region:
                !Ref AWS::Region
              account:
                !Ref AWS::AccountId
              secretname:
                !Ref {{apiName}}SecretManager
              env:
                !Ref DeploymentStage  
  {{serviceName}}LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref {{serviceName}}LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref {{apiName}}
          - "/*/*/*"  
  {{/services}}
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - !Ref {{apiName}}
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/"
        - !Ref DeploymentStage
  apiName:
    Description: API Friendly name
    Value: !Ref {{apiName}}